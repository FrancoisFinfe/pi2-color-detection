// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "settings.hxx"

// float_spec_xt
// 

const float_spec_xt::min_type& float_spec_xt::
min () const
{
  return this->min_.get ();
}

float_spec_xt::min_type& float_spec_xt::
min ()
{
  return this->min_.get ();
}

void float_spec_xt::
min (const min_type& x)
{
  this->min_.set (x);
}

const float_spec_xt::max_type& float_spec_xt::
max () const
{
  return this->max_.get ();
}

float_spec_xt::max_type& float_spec_xt::
max ()
{
  return this->max_.get ();
}

void float_spec_xt::
max (const max_type& x)
{
  this->max_.set (x);
}


// color_xt
// 

const color_xt::hue_type& color_xt::
hue () const
{
  return this->hue_.get ();
}

color_xt::hue_type& color_xt::
hue ()
{
  return this->hue_.get ();
}

void color_xt::
hue (const hue_type& x)
{
  this->hue_.set (x);
}

void color_xt::
hue (::std::auto_ptr< hue_type > x)
{
  this->hue_.set (x);
}

const color_xt::lum_type& color_xt::
lum () const
{
  return this->lum_.get ();
}

color_xt::lum_type& color_xt::
lum ()
{
  return this->lum_.get ();
}

void color_xt::
lum (const lum_type& x)
{
  this->lum_.set (x);
}

void color_xt::
lum (::std::auto_ptr< lum_type > x)
{
  this->lum_.set (x);
}

const color_xt::description_type& color_xt::
description () const
{
  return this->description_.get ();
}

color_xt::description_type& color_xt::
description ()
{
  return this->description_.get ();
}

void color_xt::
description (const description_type& x)
{
  this->description_.set (x);
}

void color_xt::
description (::std::auto_ptr< description_type > x)
{
  this->description_.set (x);
}

const color_xt::gpio_value_type& color_xt::
gpio_value () const
{
  return this->gpio_value_.get ();
}

color_xt::gpio_value_type& color_xt::
gpio_value ()
{
  return this->gpio_value_.get ();
}

void color_xt::
gpio_value (const gpio_value_type& x)
{
  this->gpio_value_.set (x);
}

const color_xt::gpio_mask_type& color_xt::
gpio_mask () const
{
  return this->gpio_mask_.get ();
}

color_xt::gpio_mask_type& color_xt::
gpio_mask ()
{
  return this->gpio_mask_.get ();
}

void color_xt::
gpio_mask (const gpio_mask_type& x)
{
  this->gpio_mask_.set (x);
}


// pi2_color_detect_config
// 

const pi2_color_detect_config::color_sequence& pi2_color_detect_config::
color () const
{
  return this->color_;
}

pi2_color_detect_config::color_sequence& pi2_color_detect_config::
color ()
{
  return this->color_;
}

void pi2_color_detect_config::
color (const color_sequence& s)
{
  this->color_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// float_spec_xt
//

float_spec_xt::
float_spec_xt (const min_type& min,
               const max_type& max)
: ::xml_schema::type (),
  min_ (min, ::xml_schema::flags (), this),
  max_ (max, ::xml_schema::flags (), this)
{
}

float_spec_xt::
float_spec_xt (const float_spec_xt& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  min_ (x.min_, f, this),
  max_ (x.max_, f, this)
{
}

float_spec_xt::
float_spec_xt (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  min_ (f, this),
  max_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void float_spec_xt::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "min" && n.namespace_ ().empty ())
    {
      this->min_.set (min_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "max" && n.namespace_ ().empty ())
    {
      this->max_.set (max_traits::create (i, f, this));
      continue;
    }
  }

  if (!min_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "min",
      "");
  }

  if (!max_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "max",
      "");
  }
}

float_spec_xt* float_spec_xt::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class float_spec_xt (*this, f, c);
}

float_spec_xt::
~float_spec_xt ()
{
}

// color_xt
//

color_xt::
color_xt (const hue_type& hue,
          const lum_type& lum,
          const description_type& description,
          const gpio_value_type& gpio_value,
          const gpio_mask_type& gpio_mask)
: ::xml_schema::type (),
  hue_ (hue, ::xml_schema::flags (), this),
  lum_ (lum, ::xml_schema::flags (), this),
  description_ (description, ::xml_schema::flags (), this),
  gpio_value_ (gpio_value, ::xml_schema::flags (), this),
  gpio_mask_ (gpio_mask, ::xml_schema::flags (), this)
{
}

color_xt::
color_xt (::std::auto_ptr< hue_type >& hue,
          ::std::auto_ptr< lum_type >& lum,
          const description_type& description,
          const gpio_value_type& gpio_value,
          const gpio_mask_type& gpio_mask)
: ::xml_schema::type (),
  hue_ (hue, ::xml_schema::flags (), this),
  lum_ (lum, ::xml_schema::flags (), this),
  description_ (description, ::xml_schema::flags (), this),
  gpio_value_ (gpio_value, ::xml_schema::flags (), this),
  gpio_mask_ (gpio_mask, ::xml_schema::flags (), this)
{
}

color_xt::
color_xt (const color_xt& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  hue_ (x.hue_, f, this),
  lum_ (x.lum_, f, this),
  description_ (x.description_, f, this),
  gpio_value_ (x.gpio_value_, f, this),
  gpio_mask_ (x.gpio_mask_, f, this)
{
}

color_xt::
color_xt (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  hue_ (f, this),
  lum_ (f, this),
  description_ (f, this),
  gpio_value_ (f, this),
  gpio_mask_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void color_xt::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // hue
    //
    if (n.name () == "hue" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< hue_type > r (
        hue_traits::create (i, f, this));

      if (!hue_.present ())
      {
        this->hue_.set (r);
        continue;
      }
    }

    // lum
    //
    if (n.name () == "lum" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< lum_type > r (
        lum_traits::create (i, f, this));

      if (!lum_.present ())
      {
        this->lum_.set (r);
        continue;
      }
    }

    break;
  }

  if (!hue_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hue",
      "");
  }

  if (!lum_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "lum",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "description" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< description_type > r (
        description_traits::create (i, f, this));

      this->description_.set (r);
      continue;
    }

    if (n.name () == "gpio_value" && n.namespace_ ().empty ())
    {
      this->gpio_value_.set (gpio_value_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "gpio_mask" && n.namespace_ ().empty ())
    {
      this->gpio_mask_.set (gpio_mask_traits::create (i, f, this));
      continue;
    }
  }

  if (!description_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "description",
      "");
  }

  if (!gpio_value_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "gpio_value",
      "");
  }

  if (!gpio_mask_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "gpio_mask",
      "");
  }
}

color_xt* color_xt::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class color_xt (*this, f, c);
}

color_xt::
~color_xt ()
{
}

// pi2_color_detect_config
//

pi2_color_detect_config::
pi2_color_detect_config ()
: ::xml_schema::type (),
  color_ (::xml_schema::flags (), this)
{
}

pi2_color_detect_config::
pi2_color_detect_config (const pi2_color_detect_config& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  color_ (x.color_, f, this)
{
}

pi2_color_detect_config::
pi2_color_detect_config (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  color_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void pi2_color_detect_config::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // color
    //
    if (n.name () == "color" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< color_type > r (
        color_traits::create (i, f, this));

      this->color_.push_back (r);
      continue;
    }

    break;
  }
}

pi2_color_detect_config* pi2_color_detect_config::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class pi2_color_detect_config (*this, f, c);
}

pi2_color_detect_config::
~pi2_color_detect_config ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::pi2_color_detect_config > r (
    ::pi2_color_detect_config_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::pi2_color_detect_config > r (
    ::pi2_color_detect_config_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::pi2_color_detect_config > r (
    ::pi2_color_detect_config_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pi2_color_detect_config_ (isrc, f, p);
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pi2_color_detect_config_ (isrc, h, f, p);
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pi2_color_detect_config_ (isrc, h, f, p);
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pi2_color_detect_config_ (isrc, f, p);
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pi2_color_detect_config_ (isrc, h, f, p);
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pi2_color_detect_config_ (isrc, h, f, p);
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::pi2_color_detect_config > r (
    ::pi2_color_detect_config_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::pi2_color_detect_config > r (
    ::pi2_color_detect_config_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::pi2_color_detect_config > r (
    ::pi2_color_detect_config_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::pi2_color_detect_config > r (
      ::pi2_color_detect_config_ (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "pi2-color-detect-config" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::pi2_color_detect_config > r (
      ::xsd::cxx::tree::traits< ::pi2_color_detect_config, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "pi2-color-detect-config",
    "");
}

::std::auto_ptr< ::pi2_color_detect_config >
pi2_color_detect_config_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "pi2-color-detect-config" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::pi2_color_detect_config > r (
      ::xsd::cxx::tree::traits< ::pi2_color_detect_config, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "pi2-color-detect-config",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

